"""
Streamlit‚ÄëGUI –¥–ª—è FastAPI‚Äë—Å–µ—Ä–≤–∏—Å–∞:
  ‚Ä¢ ¬´–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏¬ª  ‚Üí POST /summarize
  ‚Ä¢ ¬´–ò–∑–≤–ª–µ—á—å –∞—Ç—Ä–∏–±—É—Ç—ã¬ª      ‚Üí POST /attributes
"""
HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json; charset=utf-8",
}

import os
import requests
import streamlit as st
import pandas as pd



API_URL = os.getenv("API_URL", "http://127.0.0.1:8000") 
HEADERS = {"Content-Type": "application/json"}

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤", layout="wide")
st.title("üìù –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤")

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
text = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤—ã (–∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
    height=300,
    placeholder="–ö—É–ø–∏–ª –∞—Ä–±—É–∑, –æ–Ω –±—ã–ª —Å–ø–µ–ª—ã–º, —Å–æ—á–Ω—ã–º‚Ä¶",
)
text = text.replace("\r\n", "\n")


# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ post() 
def post(endpoint: str, payload: dict):
    """POST ‚Üí dict|str,  None|err_msg"""
    url = f"{API_URL}/{endpoint}"
    try:
        r = requests.post(url, json=payload, headers=HEADERS, timeout=120)
        r.raise_for_status()
        # 1) –ø—Ä–æ–±—É–µ–º JSON
        try:
            return r.json(), None
        except ValueError:
            # 2) –Ω–µ JSON ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            return r.text, None
    except requests.exceptions.RequestException as e:
        return None, str(e)

# –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
col_sum, col_attr = st.columns(2)

# –°–∞–º–º–∞—Ä–∏
if col_sum.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏", use_container_width=True):
    if not text.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏‚Ä¶"):
            data, error = post("summarize", {"text": text})

        if error:
            st.error(error)
        else:
            # –±–µ—Ä–µ–º summary –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ 
            if isinstance(data, dict):
                summary = data.get("summary") or data
            else:
                summary = data

            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç‚ÄØ—Å–∞–º–º–∞—Ä–∏:")
            if isinstance(summary, str):
                # –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ Markdown: –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–±–µ–ª + \n
                st.markdown(summary.replace("\n", "  \n"))
            else:
                st.write(summary)   # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫)

# –ê—Ç—Ä–∏–±—É—Ç—ã 
if col_attr.button("üîç –ò–∑–≤–ª–µ—á—å –∞—Ç—Ä–∏–±—É—Ç—ã", use_container_width=True):
    if not text.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞.")
    else:
        with st.spinner("–ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã‚Ä¶"):
            data, error = post("attributes", {"text": text})
        if error:
            st.error(error)
        else:
            st.subheader("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:")
            attrs = data.get("attributes", data)

            # —Å–µ—Ä–≤–µ—Ä —É–∂–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(attrs, list) and all(isinstance(x, dict) for x in attrs):
                st.dataframe(pd.DataFrame(attrs), use_container_width=True)

            # —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–¥–Ω—É –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É "–∞—Ç—Ä–∏–±—É—Ç: ‚Ä¶"
            elif isinstance(attrs, str):
                rows = []
                for line in attrs.strip().splitlines():
                    if ':' not in line:
                        continue
                    attr, vals = line.split(':', 1)
                    vals = [v.strip(' ;') for v in vals.split(';') if v.strip()]
                    rows.append({'attribute': attr.strip(),
                                 'values': ', '.join(vals)})
                if rows:
                    st.dataframe(pd.DataFrame(rows), use_container_width=True)
                else:
                    st.code(attrs)   # fallback ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å

            # –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç ‚Üí –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º
            else:
                st.write(attrs)

